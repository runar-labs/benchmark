//! Shared data types for benchmark services
//
// Intention: Define generic, serializable structures for benchmark payloads and responses.
// These types are used by all benchmark services to ensure consistency and reproducibility.
//
// Architectural boundaries:
// - All lists (accounts, services, etc) have their length controlled by the LIST_SIZE environment variable (default: 5).
// - Data types are versioned and documented here as the source of truth.

use serde::{Serialize, Deserialize};

/// User profile (generated by Service A)
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Profile {
    pub name: String,
    pub email: String,
    pub age: u8,
}

/// Account record (returned by Service B)
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Account {
    pub id: String,
    pub account_name: String,
    pub date: String,
}

/// Service record (returned by Service C)
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ServiceRecord {
    pub id: String,
    pub service_name: String,
    pub date: String,
    pub description: String,
}

/// Aggregated data (produced by Service A after collecting from B and C)
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct AggregatedData {
    pub profile: Profile,
    pub accounts: Vec<Account>,
    pub services: Vec<ServiceRecord>,
}
